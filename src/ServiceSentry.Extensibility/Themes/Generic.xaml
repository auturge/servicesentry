<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:ServiceSentry.Extensibility.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Styles/Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <controls:InverseBoolConverter x:Key="InverseBoolConverter" />

    <!-- =============================================================================== -->
    <!-- ComboCheckBox                                                                   -->
    <!-- =============================================================================== -->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <controls:ButtonChrome x:Name="Chrome"
                                           BorderBrush="{TemplateBinding BorderBrush}"
                                           Background="{TemplateBinding Background}"
                                           CornerRadius="0"
                                           RenderEnabled="{TemplateBinding IsEnabled}"
                                           RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}"
                                           RenderNormal="False"
                                           RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}"
                                           SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition
                                    MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                    Width="0" />
                            </Grid.ColumnDefinitions>

                            <TextBox Text="{TemplateBinding Content}" IsReadOnly="True" Focusable="False"
                                     Cursor="Arrow" BorderThickness="0" BorderBrush="Transparent"
                                     Background="Transparent" Margin="{TemplateBinding Padding}"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                     HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />

                            <Grid Grid.Column="1" HorizontalAlignment="Right"
                                  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="{DynamicResource {x:Static controls:ResourceKeys.GlyphBrushKey}}"
                                      HorizontalAlignment="Center" Margin="3,0,3,0" VerticalAlignment="Center" />
                            </Grid>
                        </Grid>
                    </controls:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="RenderPressed" TargetName="Chrome" Value="true" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type controls:CheckComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:CheckComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Popup x:Name="PART_Popup" AllowsTransparency="true"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               StaysOpen="False" Margin="1"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               Placement="Bottom">
                            <Grid MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <Border x:Name="DropDownBorder"
                                        MaxHeight="{Binding MaxDropDownHeight,  RelativeSource={RelativeSource TemplatedParent}}"
                                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                        BorderThickness="1"
                                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid>
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top"
                                                    Width="0">
                                                <Rectangle x:Name="OpaqueRect"
                                                           Fill="{Binding Background, ElementName=DropDownBorder}"
                                                           Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                           Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter x:Name="PART_ItemsPresenter"
                                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>

                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ToggleButton x:Name="PART_DropDownButton" Content="{TemplateBinding Text}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Background="{TemplateBinding Background}" Focusable="False"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource ComboBoxToggleButton}"
                                      IsHitTestVisible="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =============================================================================== -->
    <!-- ButtonChrome                                                                    -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type controls:ButtonChrome}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background"
                Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonNormalBackgroundKey}}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonNormalOuterBorderKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ButtonChrome}">
                    <Grid>

                        <Border x:Name="OuterBorder" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Border x:Name="InnerBorder" BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding InnerCornerRadius}"
                                    BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonNormalInnerBorderKey}}" />
                        </Border>

                        <Border x:Name="MouseOverVisual" Opacity="0" Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonMouseOverOuterBorderKey}}"
                                Background="{DynamicResource {x:Static controls:ResourceKeys.ButtonMouseOverBackgroundKey}}">
                            <Border x:Name="MouseOverInnerVisual" BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding InnerCornerRadius}"
                                    BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonMouseOverInnerBorderKey}}" />
                        </Border>
                        <Border x:Name="PressedVisual" Opacity="0" Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedOuterBorderKey}}"
                                Background="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}">
                            <Border x:Name="PressedInnerVisual" BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding InnerCornerRadius}"
                                    BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedInnerBorderKey}}" />
                        </Border>

                        <Border x:Name="FocusVisual" Opacity="0" Visibility="Collapsed"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonFocusedOuterBorderKey}}"
                                Background="{DynamicResource {x:Static controls:ResourceKeys.ButtonFocusedBackgroundKey}}">
                            <Border x:Name="FocusInnerVisual" BorderThickness="1"
                                    CornerRadius="{TemplateBinding InnerCornerRadius}"
                                    BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonFocusedInnerBorderKey}}" />
                        </Border>

                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          IsEnabled="{TemplateBinding IsEnabled}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- If button is disabled, not checked, and is rendered normal -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="False" />
                                <Condition Property="RenderChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonDisabledOuterBorderKey}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonInnerBorderDisabledKey}}" />
                            <Setter TargetName="OuterBorder" Property="Background"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ControlDisabledBackgroundKey}}" />
                        </MultiTrigger>

                        <!-- if button is enabled and pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual"
                                                                       Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.050" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00.115">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual"
                                                                       Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.115" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <!-- if button is enabled, is not checked, the mouse is over, and not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderChecked" Value="False" />
                                <Condition Property="RenderMouseOver" Value="True" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual"
                                                                       Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.115" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00.150">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual"
                                                                       Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.150" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <!-- if button is enabled, checked, he mouse is not over, and it is not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderChecked" Value="True" />
                                <Condition Property="RenderMouseOver" Value="False" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedOuterBorderKey}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedInnerBorderKey}}" />
                            <Setter TargetName="OuterBorder" Property="Background"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}" />
                        </MultiTrigger>

                        <!-- if button is focused, is enabled, not pressed, and the mouse is not over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderFocused" Value="True" />
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderPressed" Value="False" />
                                <Condition Property="RenderMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual"
                                                                       Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.25" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00.115">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual"
                                                                       Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.115" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <!-- if not rendered normally -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderNormal" Value="False" />
                                <Condition Property="RenderChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{x:Null}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =============================================================================== -->
    <!-- DropDownButton                                                                    -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type controls:DropDownButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:DropDownButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <ToggleButton x:Name="PART_DropDownButton"
                                      Grid.Column="1"
                                      IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                                <controls:ButtonChrome x:Name="ToggleButtonChrome"
                                                       CornerRadius="2.75"
                                                       RenderChecked="{TemplateBinding IsOpen}"
                                                       RenderEnabled="{TemplateBinding IsEnabled}"
                                                       RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}"
                                                       RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                                          Content="{TemplateBinding Content}"
                                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          RecognizesAccessKey="true" />
                                        <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Margin="4,3,4,3"
                                              Grid.Column="1">
                                            <Path x:Name="Arrow" Width="7" Height="4"
                                                  Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
                                                  Fill="#FF000000" />
                                        </Grid>
                                    </Grid>
                                </controls:ButtonChrome>
                            </Grid>
                        </ToggleButton>

                        <Popup x:Name="PART_Popup"
                               HorizontalOffset="1"
                               VerticalOffset="1"
                               AllowsTransparency="True"
                               StaysOpen="False"
                               Placement="Bottom"
                               Focusable="False"
                               IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}">
                            <Border BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}"
                                    BorderBrush="{StaticResource PopupDarkBorderBrush}">
                                <ContentPresenter x:Name="PART_ContentPresenter"
                                                  Content="{TemplateBinding DropDownContent}" />
                            </Border>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =============================================================================== -->
    <!-- SplitButton                                                                     -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type controls:SplitButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background"
                Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonNormalBackgroundKey}}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SplitButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <controls:ButtonChrome x:Name="ControlChrome" Background="{TemplateBinding Background}"
                                               RenderEnabled="{TemplateBinding IsEnabled}" CornerRadius="2.75">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_ActionButton" Margin="0"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Padding="{TemplateBinding Padding}">
                                    <Button.Template>
                                        <ControlTemplate TargetType="Button">
                                            <ContentPresenter />
                                        </ControlTemplate>
                                    </Button.Template>
                                    <Grid>
                                        <controls:ButtonChrome x:Name="ActionButtonChrome"
                                                               BorderThickness="1,1,0,1"
                                                               CornerRadius="2.75, 0, 0, 2.75"
                                                               RenderEnabled="{TemplateBinding IsEnabled}"
                                                               RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ActionButton}"
                                                               RenderPressed="{Binding IsPressed, ElementName=PART_ActionButton}">
                                            <ContentPresenter Name="ActionButtonContent"
                                                              Margin="{TemplateBinding Padding}"
                                                              Content="{TemplateBinding Content}"
                                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                              RecognizesAccessKey="true" />
                                        </controls:ButtonChrome>
                                    </Grid>
                                </Button>
                                <ToggleButton x:Name="PART_ToggleButton"
                                              Grid.Column="1"
                                              IsTabStop="False"
                                              IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                              IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <ContentPresenter />
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                    <Grid>
                                        <controls:ButtonChrome x:Name="ToggleButtonChrome"
                                                               Padding="1,0,1,0"
                                                               CornerRadius="0, 2.75, 2.75, 0"
                                                               RenderChecked="{TemplateBinding IsOpen}"
                                                               RenderEnabled="{TemplateBinding IsEnabled}"
                                                               RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ToggleButton}"
                                                               RenderPressed="{Binding IsPressed, ElementName=PART_ToggleButton}">
                                            <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Margin="4,3,4,3">
                                                <Path x:Name="Arrow" Width="7" Height="4"
                                                      Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
                                                      Fill="#FF000000" />
                                            </Grid>
                                        </controls:ButtonChrome>
                                    </Grid>
                                </ToggleButton>
                            </Grid>
                        </controls:ButtonChrome>

                        <Popup x:Name="PART_Popup"
                               HorizontalOffset="1"
                               VerticalOffset="1"
                               AllowsTransparency="True"
                               StaysOpen="False"
                               Placement="Bottom"
                               Focusable="False"
                               IsOpen="{Binding IsChecked, ElementName=PART_ToggleButton}">
                            <!-- TODO: Create Popup Styles that can be reused on all popups in the toolkit-->
                            <Border BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}"
                                    BorderBrush="{StaticResource ColorPickerDarkBorderBrush}">
                                <ContentPresenter x:Name="PART_ContentPresenter"
                                                  Content="{TemplateBinding DropDownContent}" />
                            </Border>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =============================================================================== -->
    <!-- CheckBox                                                                        -->
    <!-- =============================================================================== -->
    <Style x:Key="SelectorCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                    Width="13" Height="13" 
                                    Background="{DynamicResource {x:Static controls:ResourceKeys.ButtonNormalBackgroundKey}}"
                                    CornerRadius="0"
                                    BorderThickness="1"
                                    BorderBrush="{DynamicResource {x:Static controls:ResourceKeys.ButtonNormalOuterBorderKey}}">

                                <Path x:Name="CheckMark" SnapsToDevicePixels="False"
                                                  Stroke="{DynamicResource {x:Static controls:ResourceKeys.GlyphBrushKey}}"
                                                  StrokeThickness="2" StrokeEndLineCap="Round"
                                                  StrokeStartLineCap="Round" StrokeLineJoin="Round"
                                                  Data="M 2 6 L 4 8 9 3" />
                                <!--M 0 5 L 3 10 10 0-->
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter x:Name="_content"
                                          Margin="4,0,0,0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonFocusedBackgroundKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ControlDisabledBackgroundKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonDisabledOuterBorderKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static controls:ResourceKeys.ControlDisabledForegroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =============================================================================== -->
    <!-- SelectorItem                                                                    -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type controls:SelectorItem}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

        <Setter Property="IsTabStop"
                Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SelectorItem}">
                    <Border x:Name="_background"
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <CheckBox x:Name="_checkbox" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                  IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}"
                                  Content="{TemplateBinding Content}"
                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  Style="{StaticResource SelectorCheckBoxStyle}"
                                  />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =============================================================================== -->
    <!-- ToggleButton                                                                    -->
    <!-- =============================================================================== -->
    <Style x:Key="ToggleButtonStyleKey" TargetType="ToggleButton">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                                        x:Name="Border"
                                        BorderThickness="1"
                                        CornerRadius="2"
                                        Background="Transparent"
                                        BorderBrush="Transparent">
                        <ContentPresenter
                                            Margin="2"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonFocusedBackgroundKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonNormalOuterBorderKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}" />
                        </Trigger>
                        <Trigger Property="CheckBox.IsChecked" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonPressedBackgroundKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ControlDisabledBackgroundKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ButtonDisabledOuterBorderKey}}" />
                            <Setter Property="Foreground"
                                                    Value="{DynamicResource {x:Static controls:ResourceKeys.ControlDisabledForegroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>